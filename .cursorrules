# FCC Church Website - Cursor Rules

## Project Overview
This is a Next.js 14 church website for First Christian Church Granbury with a sophisticated calendar system, ministry management, and content management features. The site uses TypeScript, Tailwind CSS, Shadcn UI, and Supabase with Drizzle ORM.

## Tech Stack
- **Framework**: Next.js 14 with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS + Shadcn UI components
- **Database**: Supabase (PostgreSQL) with Drizzle ORM
- **Authentication**: Custom admin auth system
- **File Storage**: Vercel Blob Storage
- **Deployment**: Vercel (via GitHub)

## Key Features
- **Homepage**: Hero section, ministry info, special events, featured resources
- **Calendar System**: Google Calendar integration with recurring event analysis
- **Ministry Management**: Team directories, ministry database
- **Admin Dashboard**: Content management for events, ministries, special events
- **Special Events**: Featured events with custom properties
- **Seasonal Guides**: PDF downloads and management

## Calendar Data Pipeline - CRITICAL FOR DEBUGGING

### Data Flow Overview
1. **Google Calendar** → **Calendar Cache** → **Event Analysis** → **Recurring Events Cache** → **UI Components**

### Key Tables
- `calendar_cache`: Raw Google Calendar events (1-hour cache)
- `calendar_events`: Custom properties for events (ministry links, special event flags)
- `recurring_events_cache`: Analyzed recurring patterns (weekly groups)
- `ministry_teams`: Ministry team information
- `special_events`: Special event types and details

### API Endpoints
- `GET /api/calendar/events`: Main calendar endpoint with analysis
- `GET /api/recurring-events`: Cached recurring patterns for weekly groups
- `POST /api/calendar/events/by-recurring`: Lookup event connections by pattern
- `GET /api/calendar/events/by-google-id/[id]`: Get event connections by Google ID
- `GET /api/ministries/[id]`: Get ministry team details
- `GET /api/special-events/[id]`: Get special event details

### Event Analysis Process
1. **Fetch**: Google Calendar events via service account
2. **Cache**: Store in `calendar_cache` (1-hour TTL)
3. **Analyze**: Group events by title/time/location, detect recurring patterns
4. **Filter**: Remove external events, identify weekly groups
5. **Store**: Save recurring patterns in `recurring_events_cache`
6. **Connect**: Link events to ministries/special events via `calendar_events`

### Common Issues & Solutions
- **Missing weekly groups**: Check `recurring_events_cache` table
- **No ministry connections**: Verify `calendar_events` has correct `ministryTeamId`
- **Special events not showing**: Check `specialEventId` in `calendar_events`
- **Cache issues**: Use `?forceRefresh=true` on `/api/calendar/events`

## Code Style & Conventions

### TypeScript
- Use interfaces over types
- Prefer functional components with hooks
- Use proper type definitions for API responses
- Avoid `any` - use proper typing

### React Patterns
- Server Components by default, Client Components only when needed
- Use `'use client'` sparingly (modals, forms, interactive elements)
- Prefer async/await over .then()
- Use proper error boundaries and loading states

### Styling
- Mobile-first responsive design with Tailwind
- Use Shadcn UI components consistently
- Custom colors defined in `globals.css` as CSS variables
- Gradient backgrounds: `linear-gradient(135deg, #dc2626 0%, #44403c 50%, #115e59 100%)`

### File Structure
- Components in `/src/components/` organized by feature
- API routes in `/src/app/api/`
- Database queries in `/src/lib/`
- Admin components in `/src/components/admin/`

## Database Schema Notes

### Calendar Events (`calendar_events`)
- Links Google Calendar events to custom properties
- `googleEventId`: Unique Google Calendar event ID
- `ministryTeamId`: Links to ministry team
- `specialEventId`: Links to special event type
- `isExternal`: Hide from public views
- `featuredOnHomePage`: Show on homepage

### Recurring Events Cache (`recurring_events_cache`)
- Stores analyzed weekly patterns
- `dayOfWeek`: 0-6 (Sunday-Saturday)
- `time`: HH:MM format in Chicago timezone
- `confidence`: 0-1 pattern confidence score
- `eventIds`: Array of Google event IDs matching pattern

## Development Workflow

### Running the Project
```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run db:push      # Push schema changes
npm run db:studio    # Open Drizzle Studio
```

### Database Management
- Schema changes: Update `src/lib/schema.ts`, run `npm run db:push`
- Migrations: Located in `/drizzle/` directory
- Admin access: Use admin routes for data management

### Common Tasks
- **Add new ministry**: Use admin dashboard or direct DB insert
- **Link event to ministry**: Update `calendar_events` table
- **Feature event on homepage**: Set `featuredOnHomePage = true`
- **Cache refresh**: Call `/api/calendar/events?forceRefresh=true`

## Debugging Calendar Issues

### Check Data Flow
1. Verify Google Calendar API credentials
2. Check `calendar_cache` for recent events
3. Verify `recurring_events_cache` has patterns
4. Check `calendar_events` for proper links
5. Test API endpoints individually

### Logs to Watch
- Server logs for cache refresh status
- Browser console for API call failures
- Database queries for missing data

### Force Refresh
- Add `?forceRefresh=true` to calendar API calls
- Clear browser cache if needed
- Check Vercel deployment logs

## Deployment Notes
- Deploy via GitHub to Vercel
- Environment variables required: `GOOGLE_CALENDAR_ID`, `GOOGLE_SERVICE_ACCOUNT_KEY`
- Database migrations run automatically
- Test build locally before deploying

## Current Known Issues
- Weekly groups modal needs proper scrolling on mobile
- Some special events not linking properly (check `specialEventId`)
- Calendar cache may need manual refresh occasionally

## Future Improvements
- Better error handling for calendar API failures
- Improved mobile responsiveness
- Enhanced admin UX for event management
- Better caching strategy for better performance
